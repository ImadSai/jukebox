# Workflow name
name: CI/CD Jukebox
on:
  # Manually trigger workflow runs
  workflow_dispatch:
  # Trigger the workflow on push from the main branch
  push:
    branches:
      - main
jobs:

  # Test's job
  tests:
    name: Run tests
    runs-on: ubuntu-latest

    # Job's steps
    steps:
      
      # Check-out
      - uses: actions/checkout@v2 

      # Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      
      # Set up Maven cache
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      # Run Tests
      - name: Run Tests
        run: mvn -B test

  # SonarCloud analysis job
  sonar:
    name: SonarCloud analysis
    needs: tests
    runs-on: ubuntu-latest

    # Job's steps
    steps:
      
      # Check-out
      - uses: actions/checkout@v2 

      # Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      
      # Set up Maven cache
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      # Set up SonarCloud cache
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Analyze project
      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ImadSai_jukebox

  # Build's job
  build:
    name: Build Project
    needs: sonar
    runs-on: ubuntu-latest

    # Job's steps
    steps:
      
      # Check-out
      - uses: actions/checkout@v2 

      # Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      
      # Set up Maven cache
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      # Build project
      - name: Build project
        run: mvn -B package -DskipTests --file pom.xml

      # Upload JAR
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: buildResult
          #From this path
          path: target
  
  # Publish to Docker Hub job
  build-and-push-image:
    name: Build and Push Docker image to Docker Hub
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Upload JAR
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: buildResult
      
      # Upload JAR
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: imadsa
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Upload JAR
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: my-docker-hub-namespace/my-docker-hub-repository
      
      # Upload JAR
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}